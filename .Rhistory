get <- function()x
##computing the inverse of the matrix with the solve function
##and storing it the inv variable defined in enclosing environment
setinverse <- function(solve) inv <<- solve
##this returns the inverse of the matrix
getinverse <- function() inv
##list returned by the makeCacheMatrix function
##this list contains public functions accessible with
##the $ operator.
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
##cachesolve() takes as parameter a special matrix created
##with the makeCacheMatrix() function
##cachesolve() computes the inverse of the special "matrix" returned by makeCacheMatrix
##above. If the inverse has already been calculated (and the matrix has not changed),
##then the cachesolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
##we try to compute the inverse of the object created
##with the makeCacheMatrix function
inv <- x$getinverse()
##if we have already computed the inverse of the matrix and
##stored it via setinverse(), the variable inv is NOT NULL
##and we can return the cached version of inv
if(!is.null(inv)){
message("getting cached data")
##we use return to stop the execution of the function after the return.
return(inv)
}
##in the following case, we have not already computed the
##inverse so we do it now
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
##we return the computed inverse matrix
inv
}
##Sample for testing :
##x <- matrix(c(1,2,3,4), nrow=2, ncol=2)
##matrice <- makeCacheMatrix(x)
##matrice$get() will display the matrix
##cacheSolve(matrice) will compute the inverse matrix and cache the result
##cacheSolve(matrice) called a second time will pull out the cached version
x <- matrix(c(1,2,3,4), nrow=2, ncol=2)
matrice <- makeCacheMatrix(x)
matrice$get()
cacheSolve(matrice)
cacheSolve(matrice)
setwd("~/R")
outcome <- read.csv('outcome-of-care-measures.csv', colClasses="cjaracter")
outcome <- read.csv('outcome-of-care-measures.csv', colClasses="character")
head(outcome)
ncol(outcome)
nrow(outcome)
names(outcome)
outcome[,11]<- as.numeric(outcome[,11])
hist(outcome[,11])
match('DC', state.abb)
match(DC, state.abb)
state.abb
match('NY', state.abb)
source("best.R")
best("DC", "heart attack")
best("NY", "heart attack")
source("best.R")
best("DC", "heart attack")
best("VD", "heart attack")
source("best.R")
best("VD", "heart attack")
best("DC", "heart attack")
best("DC", "heart attacsk")
best("sf", "heart attacsk")
names(outcome)
source("best.R")
source("best.R")
source("best.R")
source("best.R")
best("DC", "heart attack")
source("best.R")
best("DC", "heart attack")
source("best.R")
best("DC", "heart attack")
best("TX", "heart attack")
source("best.R")
best("TX", "heart attack")
best("TX", "heart failure")
best("MD", "heart attack")
best("MD", "pneumonia")
best("BB", "heart attack")
best("NY", "hert attack")
source("best.R")
best("NY", "hert attack")
best("BB", "heart attack")
best("MD", "pneumonia")
source("best.R")
best("NY", "hert attack")
best("MD", "pneumonia")
source("best.R")
best("MD", "pneumonia")
source("best.R")
best("MD", "pneumonia")
source("http://d396qusza40orc.cloudfront.net/rprog%2Fscripts%2Fsubmitscript3.R")
submit()
submit()
submit()
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
example(order)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure",50)
source("rankhospital.R")
rankhospital("TX", "heart failure",50)
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
source("rankhospital.R")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source("rankhospital.R")
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
source("rankhospital.R")
rankhospital("MN", "heart attack", 5000)
rankhospital("MD", "heart attack", "worst")
rankhospital("TX", "heart failure", 4)
rankhospital("TX", "heart failure", "best")
submit
submit()
submit()
submit()
submit()
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
rankall("heart attack", 20)
source("rankall.R")
source("rankall.R")
rankall("heart attack", 20)
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
source("rankall.R")
rankall("heart attack", 20)
head(rankall("heart attack", 20), 10)
tail(rankall("pneumonia", "worst"), 3)
tail(rankall("heart failure"), 10)
submit()
submit()
submit()
library(swirl)
rm(list=ls())
swirl()
getwd()
ls()
x <- 9
ls()
dir()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
ls()
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path()
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2/testdir3", recursive=TRUE)
dir.create("testdir2","testdir3", recursive=TRUE)
dir.create(file.path('testdir2', 'testdir3'), recursive = TRUE)
unlink("testdir2", recursive=true)
unlink("testdir2", recursive=TRUE)
setwd(old.dir)
unlink("testdir", recursive = TRUE)
1:20
pi:10
15:1
?':'
seq(1,20)
sep(0,10,by=0.5)
seq(0,10,by=0.5)
my_seq<-seq(0,10,length=30)
my_seq<-seq(5,10,length=30)
length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(0,times=40)
rep(c(0,1,2),times=10)
rep(c(0,1,2),each=10)
num_vect<-c(0.5,55,-10,6)
tf<- num_vect<1
tf
num_vect>=6
my_char <- c("My","name","is")
my_char
paste(my_char, collapse = " ")
my_name <- c(my_char,"sylvai")
my_name
paste(my_name, collapse = " ")
paste("Hello", "worold!",sep=" ")
paste("Hello", "world!",sep=" ")
paste(1:3,c("X","Y","Z"),sep="")
paste(LETTERS,1:4,sep-"-")
paste(LETTERS,1:4,sep="-")
x<-c(44,NA,5,NA)
x*3
y<-rnorm(1000)
z<-rep(NA,1000)
my_data -> sample(c(y,z),100)
my_data <- sample(c(y,z),100)
my_na <- is.na(my_data)
my_na
info()
skip()
sum(my_na)
my_data
0?0
0/0
Inf - Inf
info()
bye()
getwd()
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(fileURL,destfile="idaho-survey.csv",method="curl")
download.file(fileURL,destfile="idahosurvey.csv",method="curl")
download.file(fileURL,destfile="./idahosurvey.csv",method="curl")
download.file(fileURL,destfile="idahosurvey.csv")
houseData <- read.csv("idahosurvey.csv")
head(houseData)
sum(houseData$ADJUST>=1000000)
sum(houseData$ADJUST>1000000)
sum(houseData$VAL>1000000)
sum(houseData$VAL>1000000, na.rm=TRUE)
sum(houseData$VAL>1000000, na.rm=TRUE)
sum(houseData$VAL>=24, na.rm=TRUE)
sum(houseData$VAL>24, na.rm=TRUE)
sum(houseData$VAL=24, na.rm=TRUE)
sum(houseData$VAL==24, na.rm=TRUE)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURL,destfile="naturalggas.xslx")
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
library(xlsx)
getwd()
install.packages("rJava")
install.packages("xlsx")
library(xlsx)
library(xlsx)
library(xlsx)
library(xslx)
install.packages("xslx")
install.packages("xsls")
library(xlsx)
dasdata <- read.xlsx("naturalggas.xlsx",sheetIndex = 1,header = TRUE)
dasdata <- read.xlsx("naturalggas.xlsx",sheetIndex=1,header = TRUE)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
dasdata <- read.xlsx("gas.xlsx",sheetIndex=1,header = TRUE)
download.file(fileURL,destfile="gas.xslx")
download.file(fileURL,destfile="gas.xlsx")
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata/data/DATA.gov_NGAP.xlsx"
download.file(fileURL,destfile="gas.xlsx")
gasdata <- read.xlsx("gas.xlsx",sheetIndex=1,header = TRUE)
head(gasdata)
colIndex<- 7:15
rowIndex <- 18:23
dat <- read.xlsx("gas.xlsx",sheetIndex=1, colIndex=collIndex, rowIndex=rowIdex)
dat <- read.xlsx("gas.xlsx",sheetIndex=1, colIndex=collIndex, rowIndex=rowIndex)
dat <- read.xlsx("gas.xlsx",sheetIndex=1, colIndex=colIndex, rowIndex=rowIndex)
sum(dat$Zip*dat$Ext,na.rm=T)
install.packages("XML")
library(XML)
fileUrl<-"https://d396qusza40orc.cloudfront.net/getdata/data/restaurants.xml"
doc <- xmlTreeParse(fileUrl,useInternal=TRUE)
doc <- xmlTreeParse("getdata_data_restaurants.xml",useInternal=TRUE)
rootNode <- xmlRoot(doc)
nammes(rootNode)
names(rootNode)
rootNode[[1]]
xpathSApply(rootNode,"\\zipcode",xmlValue)
xpathSApply(rootNode,"//zipcode",xmlValue)
sum(xpathSApply(rootNode,"//zipcode=21231",xmlValue))
sum(xpathSApply(rootNode,"//zipcode==21231",xmlValue))
sum(xpathSApply(rootNode,"//zipcode=21231",xmlValue))
xpathSApply(rootNode,"//zipcode=21231",xmlValue)
sum(xpathSApply(rootNode,"//zipcode='21231'",xmlValue))
sum(xpathSApply(rootNode,"//zipcode='21231'",xmlValue)==21231)
sum(xpathSApply(rootNode,"//zipcode",xmlValue)==21231)
DT <- fread('getdata_data_ss06pid.csv')
install.packages("data.table")
library(data.table)
DT <- fread('getdata_data_ss06pid.csv')
system.time(DT[,mean(pwgtp15),by=SEX])
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15))
system.time(rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2])
system.time({rowMeans(DT)[DT$SEX==1]; rowMeans(DT)[DT$SEX==2]})
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
system.time(sapply(split(DT$pwgtp15,DT$SEX),mean))
system.time({tapply(DT$pwgtp15,DT$SEX,mean)|)
system.time({sapply(split(DT$pwgtp15,DT$SEX),mean)})
system.time(mean(DT$pwgtp15,by=DT$SEX))
system.time({mean(DT[DT$SEX==1,]$pwgtp15); mean(DT[DT$SEX==2,]$pwgtp15)})
system.time(rowMeans(DT)[DT$SEX==1])+system.time(rowMeans(DT)[DT$SEX==2])
system.time(tapply(DT$pwgtp15,DT$SEX,mean))
install.packages("httr")
install.packages("httpuv")
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",key = "0ef5cac8408e3d6d3663",secret = "c4e94890aa778e64f95a6ac8a6d4bbd73cc71894")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
test <- fromJSON(toJSON(content(req)))
install.packages("jsonlite")
test <- fromJSON(toJSON(content(req)))
install.packages("jsonlite")
req <- fromJson(GET("https://api.github.com/users/jtleek/repos", gtoken))
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
library(httr)
BROWSE("https://api.github.com/users/jtleek/repos",authenticate("Access Token","x-oauth-basic","basic"))
req <- fromJson(GET("https://api.github.com/users/jtleek/repos", gtoken))
req <- fromJSON(toJSON(GET("https://api.github.com/users/jtleek/repos", gtoken)))
library(jsonlite)
req <- fromJSON(toJSON(GET("https://api.github.com/users/jtleek/repos", gtoken)))
library(swirl)
rm(list=ls())
swirl()
install_from_swirl("Exploratory Data Analysis")
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col = blues)
boxplot(ppm, col = blue)
boxplot(ppm, col = "blue")
abline(h=12)
hist(ppm, col = "green")
rug
rug(ppm)
low
high
hist(ppm,col = "green", breaks = 100)
rug(ppm)
hist(ppm, col = "green")
abline
abline(v=12,lwd =2)
abline(v=median(ppm),lwd =4, col="magenta")
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pm25~region,data = "pollution", col="red")
boxplot(pm25~region,data = pollution, col="red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution,"east" = TRUE)
east <- subset(pollution,region=="east")
head(east)
hist(east$ppm,col = "green")
hist(east$pm25,col = "green")
hist(subset(pollution$pm25, region == "west"),col = "green")
hist(subset(pollution, region == "west"),col = "green")
info
hist(subset(pollution, region == "west")$pm25,col = "green")
info?
hist(subset(pollution, region == "west")$pm25,col = "green")
with(pollution, plot(latitude, pm25))
abline(h=12,lwd=2,lty=2)
plot(pollution$latitude, pollution$pm25, col = pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12,lwd=2, lty=2)
par(mfrow=c(1,2), mar=c(5,4,2,1))
west <- subset(pollution, region == "west")
plot(west)
plot(west$latitude,west$pm25,main="West")
plot(east$latitude,east$pm25,main="East")
exit
quit
quit()
setwd("~/R/RepData_PeerAssessment1")
install.packages("ggplot2")
install.packages("lattice")
